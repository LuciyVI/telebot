import requests
from requests.auth import HTTPBasicAuth
import urllib3
import docker
import random
import time
import asyncio
import socket
import io

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, ChatActions, PreCheckoutQuery

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

import db  # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import backend  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
import backup
# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7445572746:AAEOT9AhdvBuT1QyiEC90rVRfEMvBjbAmzI'  # –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
PROVIDER_TOKEN = '381764678:TEST:95954'  # –¢–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
CURRENCY = 'RUB'  # –í–∞–ª—é—Ç–∞


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()
scheduler.start()


def main_menu(user_id: int):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="buy_config"),
        InlineKeyboardButton("üéÅ –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="try_free")
    )
    markup.add(
        InlineKeyboardButton("‚ÑπÔ∏è FAQ", callback_data="faq"),
        InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    )

    if db.is_admin(user_id):
        markup.add(InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    return markup


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    user_id = message.from_user.id
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(user_id))

@dp.callback_query_handler(lambda c: c.data == "select_container_backup")
async def handle_select_container_backup(callback_query: types.CallbackQuery):
    """
    –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –±—ç–∫–∞–ø–∞.
    """
    try:
        client = docker.from_env()
        containers = client.containers.list()
        markup = InlineKeyboardMarkup(row_width=1)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        for container in containers:
            # –£–∫–æ—Ä–æ—Ç–∏–º callback_data –¥–æ "backup_<–∫–æ—Ä–æ—Ç–∫–∏–π ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞>"
            markup.add(InlineKeyboardButton(
                container.name, 
                callback_data=f"backup_{container.short_id}"
            ))

        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups"))

        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—ç–∫–∞–ø–∞:", reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –±—ç–∫–∞–ø–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "buy_config")
async def send_payment_options(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥".
    """
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üí≥ –Æ–∫–∞—Å—Å–∞", callback_data="pay_yookassa"),
        InlineKeyboardButton("üåü Telegram Stars", callback_data="pay_stars")
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "pay_yookassa")
async def send_yookassa_invoice(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å–∞.
    """
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=10000)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    await bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å",
        description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        payload="subscription_payload",
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices,
        start_parameter="yookassa-payment"
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "pay_stars")
async def send_stars_invoice(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", pay=True))

    title = "–ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram Stars"
    prices = [LabeledPrice(label="XTR", amount=2)]

    await bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title=title,
        description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars",
        payload="channel_support",
        provider_token="",  # Telegram Stars –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞
        currency="XTR",
        prices=prices,
        reply_markup=keyboard
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data in ["admin_create_container", "try_free"])
async def handle_create_container(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    command = callback_query.data  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = command == "admin_create_container" and db.is_admin(user_id)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_suffix = random.randint(1, 100)
        port_443 = random.randint(5000, 6000)
        port_943 = random.randint(7000, 8000)
        port_1194_udp = random.randint(8000, 9000)

        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container = await backend.run_openvpn_container(container_suffix, port_443, port_943, port_1194_udp)
        if not container:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        password = await backend.parse_container_logs_for_password(container.id)
        if not password:
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenVPN
        config = await backend.create_openvpn_config(container.id)
        if not config:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        if is_admin:
            expiry_time = datetime.max  # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            success_message = "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!"
        else:
            expiry_time = datetime.now() + timedelta(minutes=20)  # –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî 20 –º–∏–Ω—É—Ç
            success_message = "–ü—Ä–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 20 –º–∏–Ω—É—Ç."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤ –±–∞–∑—É
        db.add_user(user_id, container.id, password, expiry_time.strftime('%Y-%m-%d %H:%M:%S'), config)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if not is_admin:
            scheduler.add_job(
                backend.delete_container,
                'date',
                run_date=expiry_time,
                args=[container.id, user_id]
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer_document(
            InputFile(io.BytesIO(config), filename="container.ovpn")
        )
        await callback_query.message.answer(success_message)
    except Exception as e:
        print(f"Error in handle_create_container: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query_handler(lambda c: c.data == "admin_panel")
async def handle_admin_panel(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    user_id = callback_query.from_user.id
    if db.is_admin(user_id):
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton("üöÄ –í—ã–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", callback_data="admin_create_container"),
            InlineKeyboardButton("üóÇ –ë–µ–∫–∞–ø—ã", callback_data="admin_backups"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        await callback_query.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
    else:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "admin_stats")
async def handle_admin_stats(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    try:
        client = docker.from_env()
        containers = client.containers.list()

        stats_message = []
        for container in containers:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            name = container.name
            status = container.status

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏—Å–∫–æ–≤–æ–º—É –∏ —Å–µ—Ç–µ–≤–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            stats = container.stats(stream=False)
            disk_io = stats['blkio_stats']['io_service_bytes_recursive']
            disk_usage = sum(item['value'] for item in disk_io if 'value' in item)

            network_stats = stats['networks']
            network_usage = sum(interface['rx_bytes'] + interface['tx_bytes'] for interface in network_stats.values())

            stats_message.append(f"{name}:\n  –°—Ç–∞—Ç—É—Å: {status}\n  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_usage} –±–∞–π—Ç\n  –°–µ—Ç–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {network_usage} –±–∞–π—Ç")

        if not stats_message:
            stats_message = ["–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."]

        await callback_query.message.answer("\n\n".join(stats_message))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "admin_backups")
async def handle_admin_backups(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–µ–∫–∞–ø—ã" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data="restore_all_containers"),
        InlineKeyboardButton("üíæ –ó–∞–±–µ–∫–∞–ø–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data="backup_all_containers"),
        InlineKeyboardButton("üì¶ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—ç–∫–∞–ø–∞", callback_data="select_container_backup"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –±—ç–∫–∞–ø–∞–º–∏:", reply_markup=markup)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "restore_all_containers")
async def handle_restore_all_containers(callback_query: types.CallbackQuery):
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    """
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        await callback_query.message.answer("–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "backup_all_containers")
async def handle_backup_all_containers(callback_query: types.CallbackQuery):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    """
    try:
        backup_dir = "./backups"
        backup.backup_all_containers(backup_dir)
        await callback_query.message.answer("–ë—ç–∫–∞–ø—ã –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–æ–≤.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("backup_"))
async def handle_backup_specific_container(callback_query: types.CallbackQuery):
    """
    –ë—ç–∫–∞–ø –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    """
    try:
        short_id = callback_query.data.split("backup_")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        client = docker.from_env()
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
        container = next((c for c in client.containers.list() if c.short_id == short_id), None)
        if not container:
            await callback_query.message.answer("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        container_id = container.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        backup_dir = "./backups"
        
        # –õ–æ–≥–∏–∫–∞ –±—ç–∫–∞–ø–∞
        backup.backup_container(container_id, f"{backup_dir}/{container_id}_backup.tar")
        await callback_query.message.answer(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–µ–∫–∞–ø–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫–∞–ø–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("backup_"))
async def handle_backup_specific_container(callback_query: types.CallbackQuery):
    """
    –ë—ç–∫–∞–ø –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    """
    try:
        short_id = callback_query.data.split("backup_")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_id = backup.get_full_container_id(short_id)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ ID, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        backup_dir = "./backups"
        backup.backup_container(container_id, f"{backup_dir}/{container_id}_backup.tar")
        await callback_query.message.answer(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–µ–∫–∞–ø–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫–∞–ø–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_id}: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
    await callback_query.answer()

async def on_startup(dispatcher):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    """
    db.init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    
if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
