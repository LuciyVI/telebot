import requests
from requests.auth import HTTPBasicAuth
import urllib3
import docker
import random
import time

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import LabeledPrice

import re

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

import asyncio
import socket
import io

import db,backend

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

TOKEN = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
PROVIDER_TOKEN = '381764678:TEST:95954'
CURRENCY='XTR'


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()
scheduler.start()

def get_unique_random_number_in_range(start, end):
    used_numbers = db.get_all_used_numbers()
    if len(used_numbers) >= (end - start + 1):
        raise ValueError("All possible numbers in the range have been used.")

    random_number = random.randint(start, end)

    while random_number in used_numbers:
        random_number = random.randint(start, end)

    db.add_used_number(random_number)
    return random_number

def add_trial_user(user_id, container_id, config):
    """
    Adds a trial user to the database with a 20-minute expiration time.

    Args:
        user_id (int): The Telegram user ID.
        container_id (str): The ID of the Docker container associated with the user.
        config (bytes): The OpenVPN configuration file as bytes.
    """
    expiration_time = datetime.now() + timedelta(minutes=20)
    expiration_time_str = expiration_time.strftime('%Y-%m-%d %H:%M:%S')
    has_used_trial = 1
    is_paid = 0
    

    # Schedule container access blocking after 20 minutes
    scheduler.add_job(
        block_container_access,
        'date',
        run_date=expiration_time,
        args=[container_id]
    )
    
def wait_for_port(port, host='0.0.0.0', timeout=60):
    start_time = time.time()
    while True:
        try:
            with socket.create_connection((host, port), timeout=5):
                return True
        except OSError:
            time.sleep(1)
            if time.time() - start_time >= timeout:
                return False
async def get_running_containers_info(type_info):
    client = docker.from_env()
    containers_info = []

    containers = client.containers.list()

    for container in containers:
        container_data = {
            'id': container.short_id,
            'name': container.name,
            'ports': container.ports,
            'status': container.status,
            'image': container.image.tags
        }

        if type_info in container_data:
            containers_info.append(container_data[type_info])
        else:
            containers_info.append(None)

    return containers_info

def block_container_access(container_id):
    client = docker.from_env()
    try:
        container = client.containers.get(container_id)
        container.stop()
        # Update the database to indicate that access has been blocked
        conn = sqlite3.connect(DATABASE)
        conn.execute('''
            UPDATE users SET access_blocked = 1 WHERE container_id = ?
        ''', (container_id,))
        conn.commit()
        print(f"Access to container {container_id} has been blocked after the trial period.")
    except Exception as e:
        print(f"Error stopping container {container_id}: {e}")



def main_menu():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ InlineKeyboardButton.
    """
    markup = InlineKeyboardMarkup(row_width=2)
    btn1 = InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="buy_config")
    btn2 = InlineKeyboardButton("üéÅ –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="try_free")
    btn3 = InlineKeyboardButton("‚ÑπÔ∏è FAQ", callback_data="faq")
    btn4 = InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    return markup

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("Welcome! Please choose an action:", reply_markup=main_menu())


# –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è Telegram Stars


@dp.callback_query_handler(lambda c: c.data == "buy_config")
async def send_invoice(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥" —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    markup = InlineKeyboardMarkup(row_width=2)
    btn_yookassa = InlineKeyboardButton("üí≥ –Æ–∫–∞—Å—Å–∞", callback_data="pay_yookassa")
    btn_stars = InlineKeyboardButton("üåü Telegram Stars", callback_data="pay_stars")
    markup.add(btn_yookassa, btn_stars)

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
        reply_markup=markup
    )
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏


@dp.callback_query_handler(lambda c: c.data == "pay_yookassa")
async def send_yookassa_invoice(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å–∞.
    """
    title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å"
    description = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"
    payload = "subscription_payload"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
    currency = "RUB"  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=10000)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (10000 = 100 —Ä—É–±–ª–µ–π)

    await bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices,
        start_parameter="yookassa-payment"
    )
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏


@dp.callback_query_handler(lambda c: c.data == "pay_stars")
async def send_stars_invoice(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars.
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", pay=True))  # –ö–Ω–æ–ø–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–ø–ª–∞—Ç—ã

    title = "–ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram Stars"
    prices = [LabeledPrice(label="XTR", amount=2000)]  # –°—É–º–º–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö/—Ü–µ–Ω—Ç–∞—Ö (XTR * 100)
    await bot.send_invoice(
        chat_id=callback_query.from_user.id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        title=title,
        description="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–∞–Ω–∞–ª –Ω–∞ 20 –∑–≤—ë–∑–¥!",
        payload="channel_support",
        provider_token="",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        currency="XTR",
        prices=prices,
        reply_markup=keyboard,  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    

@dp.callback_query_handler(lambda c: c.data == "try_free")
async def handle_trial(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_query

    if db.has_used_trial(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        user_config = db.get_user_config(user_id)
        if user_config:
            await callback_query.message.answer_document(InputFile(io.BytesIO(user_config), filename="trial.ovpn"))
        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.")
    else:
        try:
            container_suffix = get_unique_random_number_in_range(1, 100)
            port_443 = get_unique_random_number_in_range(5000, 6000)
            port_943 = get_unique_random_number_in_range(7000, 8000)
            port_1194_udp = get_unique_random_number_in_range(8000, 9000)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container = await backend.run_openvpn_container(container_suffix, port_443, port_943, port_1194_udp)
            if container is None:
                await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return

            container_id = container.short_id

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
            scheduler.add_job(
                backend.delete_container, 
                'date', 
                run_date=datetime.now() + timedelta(minutes=20), 
                args=[container_id, user_id]
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenVPN-–∫–æ–Ω—Ñ–∏–≥–∞
            config = await backend.create_openvpn_config(container_id)
            if config is None:
                await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
            db.add_user(user_id, container_id, datetime.now() + timedelta(minutes=20), config)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback_query.message.answer_document(InputFile(io.BytesIO(config), filename="trial.ovpn"))
            await callback_query.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.")
        except Exception as e:
            print(f"Error creating container: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    
@dp.callback_query_handler(lambda c: c.data == "faq")
async def handle_faq(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è FAQ".
    """
    faq_text = """
    ‚ùì FAQ:
    1. –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—à VPN –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ?
       - –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OpenVPN –Ω–∞ –≤–∞—à–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ Google Play –∏–ª–∏ App Store:
         https://apps.apple.com/ru/app/openvpn-connect-openvpn-app/id590379981
         https://play.google.com/store/apps/developer?id=OpenVPN
       - –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.

    2. –ú–æ–∂–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—à VPN –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ?
       - –î–∞, –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ —Ä–æ—É—Ç–µ—Ä–∞—Ö Keenetic.

    3. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –Ω–∞—à VPN?
       - 1 –º–µ—Å—è—Ü: 300 —Ä—É–±–ª–µ–π.
       - 6 –º–µ—Å—è—Ü–µ–≤: 1700 —Ä—É–±–ª–µ–π.
       - 1 –≥–æ–¥: 3450 —Ä—É–±–ª–µ–π.

    4. –ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
       - –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 20 –º–∏–Ω—É—Ç.
    """
    await callback_query.message.answer(faq_text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_query.message.answer()
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ



@dp.callback_query_handler(lambda c: c.data == "support")
async def handle_support(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞".
    """
    support_text = "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @PerryPetr"
    await callback_query.message.answer(support_text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_query.message.answer()
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


if __name__ == "__main__":
    db.init_db()
    executor.start_polling(dp)
